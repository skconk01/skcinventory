<?php
// $Id: invdb.module,v 1.2 2012/08/22 14:28:14 stephen Exp stephen $

/**
 * @file
 * will handle inventory data base interaction
 *
 */

//------------------------------------------------------------------------------------
/**
 * will an existing database record based on the orginal hostname
 * @method invdb_update_database_record($db_table, $form_input, $hostname);
 * @param string $db_table
 * @param string $data_array
 * @param string $hostname
 * @return integer $inv_id
 * 
 */
function invdb_update_database_record($db_table, $data_array, $hostname){
	$stop ='here';
	$inv_id_stdClass = invdb_get_inv_id($hostname);
	$inv_id = $inv_id_stdClass->inv_id;
	$table = $db_table;
	
	try {
		$rcv = db_update($table)
		->fields(array(
			 'user_id' => $data_array['name'],
			 'asset_tag' => $data_array['fixed_asset_tag'],
			 'serial_num' => $data_array['serial-number'],
			 'cub_id' => $data_array['cubid'],
			 'hostname' => $data_array['hostname'],
			 'ip_address' => $data_array['ipaddress'],
			 'machine_type' => $data_array['machine_type'],
			 'machine_user' => $data_array['machine_user'],
			 'machine_task' => $data_array['machine_task'],
			 'service_date_eop' => $data_array['service_date_eop'],
			 'service_date_str' => $data_array['service_date_str'],
			 'primary_os' => $data_array['primary_os'],
		))
		->condition('inv_id',$inv_id,'=') 
		->execute();
	} catch (Exception $e) {
		drupal_set_message(t("Sorry, that didn't work. There was an error updating the data base. $e"), 'error');
		$inv_id = 0;
	}
	
	
	return $inv_id;
}//end invdb_update_database_record(
//-------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
/**
 * function to update the database based on data from the input.module
 * @method invdb_update_database($db_table, $data_array)
 * @param string             $db_table  name of the table to update
 * @param associative array  $data_array  array containg the data to update
 * @return integer           $inv_id  the row that was updated
 *
 */
function invdb_update_database($db_table, $data_array) {
  
  $table = $db_table;

  try {
  $inv_id = db_insert($table)
  ->fields(array(
		 'user_id' => $data_array['name'],
		 'asset_tag' => $data_array['fixed_asset_tag'],
		 'serial_num' => $data_array['serial-number'],
		 'cub_id' => $data_array['cubid'],
		 'hostname' => $data_array['hostname'],
		 'ip_address' => $data_array['ipaddress'],
		 'machine_type' => $data_array['machine_type'],
		 'machine_user' => $data_array['machine_user'],
		 'machine_task' => $data_array['machine_task'],
		 'service_date_eop' => $data_array['service_date_eop'],
		 'service_date_str' => $data_array['service_date_str'],
		 'primary_os' => $data_array['primary_os'],
  ))
  ->execute();
  } catch (Exception $e) {
    drupal_set_message(t("Sorry, that didn't work. The update_database name must be unique. $e"), 'error');
    $inv_id = 0;
  }
  
  return $inv_id;
}
//------------------------------------------------------------------------------------------

/**
 * function to update the zz_system_os table with the operating system information
 * @method invdb_update_os_table($data)
 * @param array $data
 * 
 */
//---------------------------------------------------------------------------------------
function invdb_update_os_table($data){

  $stop = 'here';
  dpm($data);
  $rd['zz_team_inv_inv_id'] = $data['values']['step1']['hostname'];
  //$posarray = $data['step2'];

  $rd['sos_name'] = $data['primary_os']; // L linux, W windows, S solaris
  $rd['sos_version'] = $data['values']['step2']['os_version']; // sting discribing the os
  $rd['sos_type'] = 'P';  // P for primary os

  
  $ck_prmary_os = $ck = invdb_ck_if_primary_os_in_table($rd['zz_team_inv_inv_id']);
  
  if(!$ck_prmary_os){
  	__invdb_load_os_data($rd); // load the os table with primary os data
  }

  $num_sos = $data['values']['step2']['os_secd_num'];
  
  if (isset($data['values']['step3'])){
  	$sosarray = $data['values']['step3'];
  	
  	for ($i=0; $i<$num_sos; $i++){
  		$rd['sos_name'] = $sosarray[$i]['os_type']; // L linux, W windows, S solaris
  		$rd['sos_version'] = $sosarray[$i]['os_version']; // sting discribing the os
  		$rd['sos_type'] = 'S';  // P for primary os
  	
  		__invdb_load_os_data($rd); // load the os table with primary os data
  	}
  	 
  }

  
}//end invdb_update_os_table
//----------------------------------------------------------------------------------------

/**
 * function to load the zz_system_os table data this function is local to this module
 * @method invdb_load_os_data($rd)
 * @param array $rd  row data
 * @return integer $sos_id
 * 
 */
function __invdb_load_os_data($rd){

  $table = 'zz_system_os';
  $sos_name = __invdb_os_name($rd['sos_name']);
  $sos_id = 0;  
  try {
    $sos_id = db_insert($table)
    ->fields(array(
		   'sos_name'  => $sos_name,
		   'sos_version'  => $rd['sos_version'],
		   'sos_type'  => $rd['sos_type'],
		   'zz_team_inv_inv_id'  => $rd['zz_team_inv_inv_id'],
    
    ))
    ->execute();
  } catch (Exception $e) {
    drupal_set_message(t("Sorry, that didn't work. __invdb_load_os_data The name must be unique. $e"), 'error');
    $sos_id = 0;
  }
  
  return $sos_id;
}// end of invdb_load_os_data($rd){
//------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------
/**
 * function to give a name to the system os
 * @method __invdb_os_name($name_char)  local to this module
 * @param string $name_char   L linux, W sindows S solaris
 * @return  sting $os_name   name of the os
 * 
 */
function __invdb_os_name($name_char){

  $os_name = 'none';
  switch ($name_char)
  {
    case 'W':
      $os_name = 'Windows';
      break;
    case 'L':
      $os_name = 'Linux';
      break;
      case 'S':
        $os_name = 'Solaris';
        break;      
    default:
      $os_name = 'none';
  }
  
 return $os_name;
}//end of __invdb_os_name($name_char)


//------------------------------------------------------------------------------------------
/**
 * function to get a list of computers for a given user
 * @method invdb_get_computer_list($user_name)
 * @param  string  $user_name
 * @param  array   $computer_list
 * 

select ti.inv_id, ti.user_id, ti.hostname, so.sos_name 
  from zz_team_inv as ti, zz_system_os as so
  where ti.inv_id = so.zz_team_inv_inv_id	  
  and  ti.user_id = 'sconklin'
  and so.sos_type = 'P'
;


 */
function invdb_get_computer_list($user_name){
  $stop = 0;
  
  $query = ("SELECT inv_id, hostname, user_id, primary_os FROM zz_team_inv
             WHERE user_id = '" . $user_name . "'
            ");
 

  /* $query = ("select ti.inv_id, ti.user_id, ti.hostname, so.sos_name */
  /*            from zz_team_inv as ti, zz_system_os as so */
  /*             where ti.inv_id = so.zz_team_inv_inv_id */
  /*             and  ti.user_id = '" . $user_name . "' */
  /*             and so.sos_type = 'P' */
  /*            "); */

 
  $result = db_query($query);
  
  foreach ($result as $row) {
    $computer_list[] = $row;
  }
  
  if (empty($computer_list)){
  	$computer_list = array();  // make this an emptey array to stop Undefined variable error
  }
  
  return $computer_list;
}// end of invdb_get_computer_list


//-------------------------------------------------------------------------
/**
 * function to get the hostname based on the inv_id
 * @method invdb_get_hostname($inv_id)
 * @param  string  $inv_id
 * @return  string  $hostname
 * 
 */
function invdb_get_hostname($inv_id){
  $stop = 0;
  
  $query = ("SELECT hostname  FROM zz_team_inv
             WHERE inv_id = '" . $inv_id . "'
            ");
  
  $result = db_query($query);
  
  foreach ($result as $row) {
    $rd[] = $row;
  }
  $hostname = $rd[0]->hostname;

  return $hostname;
}// end of invdb_get_hostname
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
/**
 * function to get the inv_id based on the hostname
 * @method invdb_get_inv_id($hostname)
 * @param  string  $hostname
 * @return  string  $inv_id
 * 
 */
function invdb_get_inv_id($hostname){
  $stop = 0;
  
  $query = ("SELECT inv_id  FROM zz_team_inv
             WHERE hostname = '" . $hostname . "'
            ");
  
  $result = db_query($query);
  
  foreach ($result as $row) {
    $rd[] = $row;
  }
  $inv_id = $rd[0];

  return $inv_id;
}// end of invdb_get_hostname
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
/**
 * private function to check if a file data alread exists in the zz_system_info table
 * @method __invdb_ck_for_file_name($file_name)
 * @param string $file_name
 * @return boolean $existence  TRUE if the file is in the data base
 *                               FALSE if the file is not in the data base
 */
function __invdb_ck_for_file_name($file_name){
	$existence = FALSE;
	$query_string = "SELECT COUNT(*) as num FROM zz_system_info WHERE file_name = '". $file_name ."' ";
	$bid = db_query($query_string);
	foreach ($bid as $row) {
		$rd[] = $row;
	}
	$val = $rd[0]->num;
	if ($val != 0){
		$existence = TRUE;
	}
	return $existence ;
}// end __invdb_ck_for_file_name($file_name)
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
/**
 * private function to remove row with file data so can enter new file data
 * @method __invdb_rm_file_name($file_name)
 * @param string $file_name
 * DELETE FROM zz_system_info  WHERE file_name = 'skclinux.html';
 */
function __invdb_rm_file_name($file_name){
	
	//$query_string = "DELETE FROM zz_system_info  WHERE file_name = '". $file_name ."'";
	
	db_delete('zz_system_info')
	->condition('file_name', $file_name)
	->execute();
	
	return;
}// end __invdb_rm_file_name($file_name)
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
/**
 * function to update the file name of the system info file
 * @method invdb_update_sysinfo_file
 * @param string $zz_team_inv_inv_id  id of the system file belons to
 * @param string $file_name name of file to upload
 * @param string $directory drupalized driectory where file is saved.
 * @param int  $epoch  the epoch of when the file was saved
 * @return integer $sys_id
 */
function invdb_update_sysinfo_file($zz_team_inv_inv_id, $file_name, $directory, $epoch){
  $table = 'zz_system_info';
  
  $bid = __invdb_ck_for_file_name($file_name);
  
  
  if((__invdb_ck_for_file_name($file_name))){// returns true if the file is in database
  	$stop = 'here';
  	__invdb_rm_file_name($file_name);
  }
  
  
  try {
    $sys_id = db_insert($table)
    ->fields(array(
        'zz_team_inv_inv_id' => $zz_team_inv_inv_id,
        'file_name' => $file_name,
        'file_path' => $directory,
    	'epoch' => $epoch,	
    ))
    ->execute();
  } catch (Exception $e) {
    drupal_set_message(t("Sorry, that didn't work. update_sysinfo_file The name must be unique. $e"), 'error');
    $sys_id = 0;
  }
  
return $sys_id;
}//end of invdb_update_sysinfo_file
//-------------------------------------------------------------------------


//-------------------------------------------------------------------------
/**
 * function to return the primary os for a given hostname
 * @method invdb_get_primary_os
 * @param text $hostname  name of the system  really the inv_id
 * @return txt $ostype   L for linux W for windows
 */
function invdb_get_primary_os($hostname){
  
  $stop = 'here';
  $query = ("SELECT primary_os  FROM zz_team_inv
             WHERE hostname = '" . $hostname . "'
            ");
  
  $result = db_query($query);
  foreach ($result as $row) {
    $rd[] = $row;
  }
  
  $pos = $rd[0]->primary_os;
  
  return $pos;
} //end of invdb_get_primary_os
//-------------------------------------------------------------------------

//-------------------------------------------------------------------------
/**
 * check the zz_system_os table to determain if the system identified by
 * zz_team_inv_inv_id has an entery for primay os
 * @method invdb_ck_if_primary_os_in_table()
 * @param int $zz_team_inv_inv_id id of system in the zz_team_inv table
 * @return boolean  $return_val  TRUE if there is a primary os entered
 *                                 FALSE if there is no primary os entered
 * 
 */
function invdb_ck_if_primary_os_in_table($zz_team_inv_inv_id){
	$return_val = FALSE;
	//SELECT sos_type FROM zz_system_os WHERE zz_team_inv_inv_id = '3';
	$query = ("SELECT sos_type FROM zz_system_os
	           WHERE zz_team_inv_inv_id ='".$zz_team_inv_inv_id."'
	          ");
	
	$result = db_query($query);
	foreach ($result as $row) {
		$rd[] = $row;
	}
	
	if(isset($rd)){
		$return_val = TRUE;
	}
	
	return $return_val;
}// end invdb_ck_if_primary_os_in_table($zz_team_inv_inv_id)
//-------------------------------------------------------------------------

//----------------------------------------------------------------------------
/**
 * based on the zz_team_inv inv_id return the primary sos_version 
 * from the zz_system_os table
 * @method invdb_primary_os_version_string($inv_id)
 * @param int  $inv_id
 * @return string $primary_os
 * 
 */
function invdb_primary_os_version_string($inv_id){
	$primary_os ='NotFound';
	$query = ("SELECT sos_version FROM zz_system_os
			WHERE sos_type = 'P'
			AND
			zz_team_inv_inv_id ='".$inv_id."'
			");
	
	$result = db_query($query);
	
	foreach ($result as $row) {
		$rd[] = $row;
	}
	
	if (isset($rd[0]->sos_version)){
	  $primary_os = $rd[0]->sos_version;
	}
	
	return $primary_os;
} //end invdb_primary_os_version_string
//----------------------------------------------------------------------------



//----------------------------------------------------------------------------
/**
 * build and return a formated named link to the info file based on the zz_team_inv_inv_id
 * @method invdb_get_info_file_name_link($inv_id)
 * @param  int $inv_id
 * @return string $link_name
 * print l(t('This is the link text'), 'node/2');
 *  file_create_url($uri)
 */
function invdb_get_info_file_name_link($inv_id){
	
	$stop = 'here';
	$link_name = 'No Info File';
	
	
	$query = ("SELECT so.file_name, so.file_path, so.epoch FROM zz_system_info AS so
			WHERE zz_team_inv_inv_id ='".$inv_id."'
			");
	
	$result = db_query($query);
	
	foreach ($result as $row) {
		$rd[] = $row;
	}
	
	if (isset($rd[0]->file_name)){
		$name = $rd[0]->file_name;
	    $link = $rd[0]->file_path;
	    $epoch = $rd[0]->epoch;
        //$link_name = l(t($name), "$link/$name");
        //$link_name = file_create_url($uri);
	    //$file_uri = file_create_url(file_build_uri('images/example.jpeg'));
	    //$uri = "inventory/configuration_files/$name";
	    //$uri = $link;
	    //$link_name = l( $name, file_create_url(file_build_uri($uri)));
	    $link_name = __formate_link_name($name, $link);
	    
	    
	}
	return  $link_name;
}// end invdb_get_info_file_name_link
//----------------------------------------------------------------------------


/**
 * for the hostname of the logged in user create a link to the Base System Data page 
 * around the hostname that was passed in. for hostnames of non user systems just return 
 * an unlinked hostname to be displayed
 * @method invdb_get_hostname($logged_in_user, $hostname)
 * @param string $logged_in_user
 * @param string $hostname
 * @return string $linded_hostname  only hostnames of the user_id will be linked
 * 
 * SELECT ti.user_id FROM zz_team_inv AS ti WHERE ti.hostname = @hn;
 */
function  invdb_get_hostname_link($logged_in_user, $hostname){
	
	$stop = 'here';
	$linded_hostname = $hostname;
	//TO DO fasion reletive  url using  _GLOBALVARS 
	$base_system_data = 'http://10.255.128.73/inventory/input/inv/bs?hname=' . $hostname; 
	
	$query = ("SELECT ti.user_id FROM zz_team_inv AS ti
			WHERE  ti.hostname ='".$hostname."'
			");
	
	$result = db_query($query);
	
	foreach ($result as $row) {
		$rd[] = $row;
	}
	
	$id = $rd[0]->user_id;
	
	if ($id == $logged_in_user){
		//<a href="http://www.w3schools.com">Visit W3Schools.com!</a>
		$stop='here';
		$linded_hostname = "<a href=$base_system_data> $hostname </a>"; 
		
	}//end if id == user_id
	
	
	return $linded_hostname;
} // end invdb_get_hostname($user_id, $hostname)
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
/**
 * create and return a well formated link name 
 * @method __formate_link_name($name, $link)
 * @param string $name
 * @param string $link
 * @return string $link_name
 * 
 * strip the  public:// from the link array
 * build the uri
 * build the $link_name
 */
function __formate_link_name($name, $link){

	$stop = 'here';
	$base_uri_array = explode("://", $link);
	$uri = "$base_uri_array[1]/$name";
	$link_name = l( $name, file_create_url(file_build_uri($uri)));
	
	return $link_name;
}//end __formate_link_name
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------
/**
 * get all of the base values from the database to be used as the form default values
 * @method invdb_get_values($hostname)
 * @param string $hostname
 * @return array $base_data_array
 */
//----------------------------------------------------------------------------
function invdb_get_values($hostname){
	
	$stop = 'here';
	$query = ("SELECT * FROM zz_team_inv 
			WHERE  hostname ='".$hostname."'
			");
	
	$result = db_query($query);
	foreach ($result as $row) {
		$rd[] = $row;
	}
	
	return $rd[0];
}// end invdb_get_values($hostname)
//----------------------------------------------------------------------------

